{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-16T01:15:05.795Z",
    "end": "2025-09-16T01:15:05.855Z",
    "duration": 60,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6ae0a30c-40e2-4644-b6d8-4ef731ff130d",
      "title": "",
      "fullFile": "C:\\Pessoal\\POS Automação Testes\\trabalho-final-pgats-2025-02\\graphql\\test\\graphql.external.test.js",
      "file": "\\graphql\\test\\graphql.external.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "de4c15a1-7167-46e5-a22c-da4f6b42aa37",
          "title": "Testes External GraphQL",
          "fullFile": "C:\\Pessoal\\POS Automação Testes\\trabalho-final-pgats-2025-02\\graphql\\test\\graphql.external.test.js",
          "file": "\\graphql\\test\\graphql.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar novo usuário via GraphQL",
              "fullTitle": "Testes External GraphQL Deve cadastrar novo usuário via GraphQL",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaEsperada = require('../fixture/respostas/quandoCadastroNovoUsuarioQueNaoExisteRetornaSucesso.json');\nconst mutation = `\n    mutation {\n        register(name: \"Andreia 10\", email: \"andreia10@gmail.com\", password: \"123456\") {\n            email\n            name\n        }\n    }\n`;\nconst res = await request(apiUrl)\n    .post('/graphql')\n    .send({ query: mutation\n});",
              "err": {},
              "uuid": "8b8eec78-e2b5-4479-96f4-6d27e3852a3d",
              "parentUUID": "de4c15a1-7167-46e5-a22c-da4f6b42aa37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao tentar cadastrar usuário com email já cadastrado",
              "fullTitle": "Testes External GraphQL Deve retornar erro ao tentar cadastrar usuário com email já cadastrado",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaErro = require('../fixture/respostas/quandoIndicadoEmailJaCadastradoInformaEmailJaCadastrado.json');\nconst mutation = `\n    mutation {\n        register(name: \"Andreia 10\", email: \"andreia10@gmail.com\", password: \"123456\") {\n            email\n            name\n        }\n    }\n`;\nconst res = await request(apiUrl)\n    .post('/graphql')\n    .send({ query: mutation });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('errors');\nexpect(res.body.errors[0].message).to.equal(respostaErro.errors[0].message);",
              "err": {},
              "uuid": "6676faf7-a5c3-43e9-98b5-bfb90d119617",
              "parentUUID": "de4c15a1-7167-46e5-a22c-da4f6b42aa37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao autenticar usuário com senha inválida",
              "fullTitle": "Testes External GraphQL Deve retornar erro ao autenticar usuário com senha inválida",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mutation = `\n    mutation Login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                email\n                name\n            }\n        }\n    }\n`;\nconst variables = {\n    email: \"andreia10@gmail.com\",\n    password: \"abc123\"\n};\nconst res = await request(apiUrl)\n    .post('/graphql')\n    .send({ query: mutation, variables });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('errors');\nexpect(res.body.errors[0].message).to.include('Credenciais inválidas');",
              "err": {},
              "uuid": "a2d0bcd9-482a-40fb-b60c-5ba6cdf3ff75",
              "parentUUID": "de4c15a1-7167-46e5-a22c-da4f6b42aa37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro ao tentar autenticar email não cadastrado",
              "fullTitle": "Testes External GraphQL Deve retornar erro ao tentar autenticar email não cadastrado",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mutation = `\n    mutation Login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                email\n                name\n            }\n        }\n    }\n`;\nconst variables = {\n    email: \"andreia.aaa@email.com\",\n    password: \"123456\"\n};\nconst res = await request(apiUrl)\n    .post('/graphql')\n    .send({ query: mutation, variables });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('errors');\nexpect(res.body.errors[0].message).to.include('Credenciais inválidas');",
              "err": {},
              "uuid": "996f0afc-cded-4ef5-bab3-e1e259ad6ded",
              "parentUUID": "de4c15a1-7167-46e5-a22c-da4f6b42aa37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b8eec78-e2b5-4479-96f4-6d27e3852a3d",
            "6676faf7-a5c3-43e9-98b5-bfb90d119617",
            "a2d0bcd9-482a-40fb-b60c-5ba6cdf3ff75",
            "996f0afc-cded-4ef5-bab3-e1e259ad6ded"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}