{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-10T02:57:49.787Z",
    "end": "2025-09-10T02:57:50.005Z",
    "duration": 218,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5bc89214-8cd1-47ce-9e9b-09c3c8e1056a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce50e0f1-dddf-4cf8-aec2-990891105d45",
          "title": "Cadastrando de Usuários",
          "fullFile": "C:\\Pessoal\\POS Automação Testes\\trabalho-final-pgats-2025-02\\rest\\test\\rest.external.test.js",
          "file": "\\rest\\test\\rest.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastro falha quando email já existe",
              "fullTitle": "Cadastrando de Usuários Cadastro falha quando email já existe",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(apiUrl)\n    .post('/api/users/register')\n    .send({ name: 'Andreia', email: 'andreia2.schienemayer@gmail.com', password: '123456' });\nconst respostaErro = require('../fixture/respostas/quandoInformoEmailJaCadastradoRetorna400.json');\nconst res = await request(apiUrl)\n    .post('/api/users/register')\n    .send({ name: 'Andreia', email: 'andreia2.schienemayer@gmail.com', password: '123456' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.deep.equal(respostaErro);",
              "err": {},
              "uuid": "f47b2a0e-b3e9-4140-9d77-956111a3c362",
              "parentUUID": "ce50e0f1-dddf-4cf8-aec2-990891105d45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f47b2a0e-b3e9-4140-9d77-956111a3c362"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "87173722-f8c8-4ef0-80ee-62efc58e867d",
          "title": "Login no sistema",
          "fullFile": "C:\\Pessoal\\POS Automação Testes\\trabalho-final-pgats-2025-02\\rest\\test\\rest.external.test.js",
          "file": "\\rest\\test\\rest.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve autenticar usuário válido e retornar o token JWT",
              "fullTitle": "Login no sistema Deve autenticar usuário válido e retornar o token JWT",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(apiUrl)\n    .post('/api/users/register')\n    .send({ name: 'Andreia', email: 'andreia2.schienemayer@gmail.com', password: '123456' });\nconst res = await request(apiUrl)\n    .post('/api/users/login')\n    .send({ email: 'andreia2.schienemayer@gmail.com', password: '123456' });\n//console.log('Retorno do login:', res.body); \nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');\nexpect(res.body.token).to.be.a('string');",
              "err": {},
              "uuid": "631ce186-0c17-4ad7-8adf-8d79f7e814a4",
              "parentUUID": "87173722-f8c8-4ef0-80ee-62efc58e867d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Quando informar login inválido deve retornar Credenciais Inválidas",
              "fullTitle": "Login no sistema Quando informar login inválido deve retornar Credenciais Inválidas",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(apiUrl)\n    .post('/api/users/register')\n    .send({ name: 'Andreia', email: 'andreia2.schienemayer@gmail.com', password: '1234567' });\nconst respostaErro = require('../fixture/respostas/quandoInformoLoginInvalidoNaoAcessa.json');\nconst res = await request(apiUrl)\n    .post('/api/users/login')\n    .send({ email: 'andreia2.schienemayer@gmail.com', password: '1234567' });\nexpect(res.status).to.equal(401); \nexpect(res.body).to.deep.equal(respostaErro);",
              "err": {},
              "uuid": "d7ef612d-0e11-473e-a23a-047bd32fbfec",
              "parentUUID": "87173722-f8c8-4ef0-80ee-62efc58e867d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "631ce186-0c17-4ad7-8adf-8d79f7e814a4",
            "d7ef612d-0e11-473e-a23a-047bd32fbfec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4e00ba27-d45d-447f-9a0f-e37d33dcb754",
          "title": "Checkout",
          "fullFile": "C:\\Pessoal\\POS Automação Testes\\trabalho-final-pgats-2025-02\\rest\\test\\rest.external.test.js",
          "file": "\\rest\\test\\rest.external.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar checkout com token válido usando boleto",
              "fullTitle": "Checkout Deve realizar checkout com token válido usando boleto",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaEsperada = require('../fixture/respostas/quandoUsoTokenValidoComBoletoRetornaCheckoutRealizado.json');\nconst loginRes = await request(apiUrl)\n    .post('/api/users/login')\n    .send({ email: 'andreia@gmail.com', password: '123456' });\nconst token = loginRes.body.token;\nconst res = await request(apiUrl)\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        items: [\n            { productId: 1, quantity: 2 }\n        ],\n        paymentMethod: 'boleto',\n        freight: 0 \n    });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(respostaEsperada);",
              "err": {},
              "uuid": "ed0f4edb-4f60-469e-8f44-d82992e784f5",
              "parentUUID": "4e00ba27-d45d-447f-9a0f-e37d33dcb754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar checkout com token válido usando cartão de crédito",
              "fullTitle": "Checkout Deve realizar checkout com token válido usando cartão de crédito",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaEsperada = require('../fixture/respostas/quandoUsoTokenValidoComCartaoRetornaCheckoutRealizado.json');\nconst loginRes = await request(apiUrl)\n    .post('/api/users/login')\n    .send({ email: 'andreia@gmail.com', password: '123456' });\nconst token = loginRes.body.token;\nconst res = await request(apiUrl)\n    .post('/api/checkout')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        items: [\n            { productId: 2, quantity: 2 }\n        ],\n        paymentMethod: 'cartao',\n        freight: 10 \n    });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(respostaEsperada);",
              "err": {},
              "uuid": "a3c710c6-438b-471d-95b3-e9f9b5eeaab7",
              "parentUUID": "4e00ba27-d45d-447f-9a0f-e37d33dcb754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar erro de autenticação ao tentar checkout sem token",
              "fullTitle": "Checkout Deve retornar erro de autenticação ao tentar checkout sem token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaErro = require('../fixture/respostas/quandoNaoInformoTokenReceboTokenInvalidoAoFazerCheckout.json');\nconst res = await request(apiUrl)\n    .post('/api/checkout')        \n    .send({\n        items: [\n            { productId: 1, quantity: 2 }\n        ],\n        paymentMethod: 'boleto',\n        freight: 0\n    });\nexpect(res.status).to.equal(401); \nexpect(res.body).to.deep.equal(respostaErro);",
              "err": {},
              "uuid": "0314b8a1-2f7c-4069-b5c3-47650d149aa9",
              "parentUUID": "4e00ba27-d45d-447f-9a0f-e37d33dcb754",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed0f4edb-4f60-469e-8f44-d82992e784f5",
            "a3c710c6-438b-471d-95b3-e9f9b5eeaab7",
            "0314b8a1-2f7c-4069-b5c3-47650d149aa9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}